/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DrawingArea;

import static DrawingArea.Area.shapesInArea;
import finalproject.Circle;
import finalproject.RightAngledTriangle;
import finalproject.Shape;
import finalproject.ShapeFactory;
import finalproject.Square;
import finalproject.Triangle;
import java.awt.Graphics;


public class PaintingSection extends javax.swing.JFrame {

    /**
     * Creates new form PaintingSection
     */
    private static PaintingSection instance = null;

    private PaintingSection() {
        initComponents();
    }

    public static PaintingSection getInstance() {
        if (instance == null) {
            instance = new PaintingSection();
        }
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        area1 = new DrawingArea.Area();
        jColorChooser1 = new javax.swing.JColorChooser();
        jPanel1 = new javax.swing.JPanel();
        lineButton = new javax.swing.JButton();
        rectangleButton = new javax.swing.JButton();
        squareButton = new javax.swing.JButton();
        triangleButton = new javax.swing.JButton();
        rightangledtriangle = new javax.swing.JButton();
        circleButton = new javax.swing.JButton();
        ovalButton = new javax.swing.JButton();
        filledOrNot = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        drawButton = new javax.swing.JToggleButton();
        clearButton = new javax.swing.JButton();
        undoButton = new javax.swing.JButton();
        deleteClickedButton = new javax.swing.JToggleButton();
        moveButton = new javax.swing.JToggleButton();
        resizeButton = new javax.swing.JToggleButton();
        copyButton = new javax.swing.JToggleButton();
        redoButton = new javax.swing.JButton();
        repaintButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(java.awt.SystemColor.activeCaption);

        area1.setBackground(new java.awt.Color(255, 255, 255));
        area1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(255, 51, 51)));

        javax.swing.GroupLayout area1Layout = new javax.swing.GroupLayout(area1);
        area1.setLayout(area1Layout);
        area1Layout.setHorizontalGroup(
            area1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 534, Short.MAX_VALUE)
        );
        area1Layout.setVerticalGroup(
            area1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 421, Short.MAX_VALUE)
        );

        jColorChooser1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jColorChooser1MouseClicked(evt);
            }
        });

        jPanel1.setBackground(java.awt.SystemColor.activeCaption);

        lineButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lineButton.setText("Line");
        lineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineButtonActionPerformed(evt);
            }
        });

        rectangleButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        rectangleButton.setText("Rectangle");
        rectangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleButtonActionPerformed(evt);
            }
        });

        squareButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        squareButton.setText("Square");
        squareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareButtonActionPerformed(evt);
            }
        });

        triangleButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        triangleButton.setText("Triangle");
        triangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangleButtonActionPerformed(evt);
            }
        });

        rightangledtriangle.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        rightangledtriangle.setText("RightAngledTriangle");
        rightangledtriangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightangledtriangleActionPerformed(evt);
            }
        });

        circleButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        circleButton.setText("Circle");
        circleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleButtonActionPerformed(evt);
            }
        });

        ovalButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ovalButton.setText("Oval");
        ovalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ovalButtonActionPerformed(evt);
            }
        });

        filledOrNot.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        filledOrNot.setText("Filled");
        filledOrNot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filledOrNotActionPerformed(evt);
            }
        });

        jPanel3.setBackground(java.awt.SystemColor.activeCaption);

        jLabel1.setFont(new java.awt.Font("Viner Hand ITC", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("L");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.setDoubleBuffered(true);

        jLabel2.setFont(new java.awt.Font("Viner Hand ITC", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 153, 51));
        jLabel2.setText("E");

        jLabel3.setFont(new java.awt.Font("Viner Hand ITC", 1, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 0));
        jLabel3.setText("T");

        jLabel4.setFont(new java.awt.Font("Viner Hand ITC", 0, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 51, 51));
        jLabel4.setText("'s");

        jLabel5.setFont(new java.awt.Font("Viner Hand ITC", 1, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 153, 51));
        jLabel5.setText("P");

        jLabel6.setFont(new java.awt.Font("Viner Hand ITC", 1, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 102));
        jLabel6.setText("A");

        jLabel7.setFont(new java.awt.Font("Viner Hand ITC", 1, 36)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("I");

        jLabel8.setFont(new java.awt.Font("Viner Hand ITC", 1, 36)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 153, 51));
        jLabel8.setText("N");

        jLabel9.setFont(new java.awt.Font("Viner Hand ITC", 1, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 51));
        jLabel9.setText("T");

        jLabel10.setFont(new java.awt.Font("Viner Hand ITC", 1, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 51, 51));
        jLabel10.setText("!");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(32, 32, 32)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jLabel10))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(circleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lineButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addComponent(filledOrNot, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(triangleButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rectangleButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ovalButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(212, 212, 212)
                .addComponent(rightangledtriangle, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(rectangleButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lineButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(squareButton)
                            .addComponent(triangleButton, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ovalButton)
                            .addComponent(circleButton)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(filledOrNot)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightangledtriangle)
                .addContainerGap())
        );

        jPanel2.setBackground(java.awt.SystemColor.activeCaption);

        drawButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        drawButton.setText("Draw");
        drawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        clearButton.setText("Clear Area");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        undoButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        undoButton.setText("Undo");
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });

        deleteClickedButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        deleteClickedButton.setText("Delete Clicked");
        deleteClickedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteClickedButtonActionPerformed(evt);
            }
        });

        moveButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        moveButton.setText("Move");
        moveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveButtonActionPerformed(evt);
            }
        });

        resizeButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        resizeButton.setText("Resize");
        resizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeButtonActionPerformed(evt);
            }
        });

        copyButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        copyButton.setText("Copy Clicked");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        redoButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        redoButton.setText("Redo");
        redoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoButtonActionPerformed(evt);
            }
        });

        repaintButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        repaintButton.setText("Repaint");
        repaintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repaintButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(undoButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clearButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                            .addComponent(drawButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(24, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(copyButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(resizeButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(moveButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteClickedButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                            .addComponent(redoButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(repaintButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(drawButton)
                .addGap(18, 18, 18)
                .addComponent(clearButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(undoButton)
                .addGap(18, 18, 18)
                .addComponent(deleteClickedButton)
                .addGap(18, 18, 18)
                .addComponent(redoButton)
                .addGap(21, 21, 21)
                .addComponent(moveButton)
                .addGap(18, 18, 18)
                .addComponent(resizeButton)
                .addGap(17, 17, 17)
                .addComponent(copyButton)
                .addGap(18, 18, 18)
                .addComponent(repaintButton)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(area1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 783, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(area1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineButtonActionPerformed
        // TODO add your handling code here:
        if (filledOrNot.isSelected()) {
            area1.isFilled = true;
        } else {
            area1.isFilled = false;
        }
        area1.choice = 'L';
        area1.currentColor = jColorChooser1.getColor();
    }//GEN-LAST:event_lineButtonActionPerformed

    private void rectangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleButtonActionPerformed
        // TODO add your handling code here
        if (filledOrNot.isSelected()) {
            area1.isFilled = true;
        } else {
            area1.isFilled = false;
        }

        area1.choice = 'R';
        area1.currentColor = jColorChooser1.getColor();
    }//GEN-LAST:event_rectangleButtonActionPerformed

    private void filledOrNotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filledOrNotActionPerformed
        // TODO add your handling code here:
        if (filledOrNot.isSelected()) {
            area1.isFilled = true;
        } else {
            area1.isFilled = false;
        }
    }//GEN-LAST:event_filledOrNotActionPerformed

    private void squareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareButtonActionPerformed

// TODO add your handling code here:
        if (filledOrNot.isSelected()) {
            area1.isFilled = true;
        } else {
            area1.isFilled = false;
        }
        area1.choice = 'S';
        area1.currentColor = jColorChooser1.getColor();
    }//GEN-LAST:event_squareButtonActionPerformed

    private void triangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangleButtonActionPerformed
        if (filledOrNot.isSelected()) {
            area1.isFilled = true;
        } else {
            area1.isFilled = false;
        }

        area1.choice = 'T';
        area1.currentColor = jColorChooser1.getColor();
    }//GEN-LAST:event_triangleButtonActionPerformed

    private void rightangledtriangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightangledtriangleActionPerformed
        if (filledOrNot.isSelected()) {
            area1.isFilled = true;
        } else {
            area1.isFilled = false;
        }

        area1.choice = 'A';
        area1.currentColor = jColorChooser1.getColor();
    }//GEN-LAST:event_rightangledtriangleActionPerformed

    private void circleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleButtonActionPerformed
        // TODO add your handling code here:
        if (filledOrNot.isSelected()) {
            area1.isFilled = true;
        } else {
            area1.isFilled = false;
        }

        area1.choice = 'C';
        area1.currentColor = jColorChooser1.getColor();
    }//GEN-LAST:event_circleButtonActionPerformed

    private void ovalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ovalButtonActionPerformed
        if (filledOrNot.isSelected()) {
            area1.isFilled = true;
        } else {
            area1.isFilled = false;
        }

        area1.choice = 'O';
        area1.currentColor = jColorChooser1.getColor();
    }//GEN-LAST:event_ovalButtonActionPerformed

    private void deleteClickedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteClickedButtonActionPerformed
        // TODO add your handling code here:
        if (deleteClickedButton.isSelected()) {
            area1.action = 'D';
        }


    }//GEN-LAST:event_deleteClickedButtonActionPerformed

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
        if (!Area.unDo.isEmpty()) {
            Undo u = Area.unDo.pop();
            Area.reDo.push(u);
            switch (u.getActionUndo()) {
                case 'D': {
                    ShapeFactory sFactory = new ShapeFactory();
                    Shape shape = sFactory.createShape(u.getShape(), u.getColor(), u.isIsFilled(), u.getX1(), u.getX2(), u.getY1(), u.getY2());
                    if (shape instanceof RightAngledTriangle) {
                        RightAngledTriangle rt = (RightAngledTriangle) shape;
                        rt.setX3(u.getX3());
                        rt.setY3(u.getY3());
                    } else if (shape instanceof Triangle) {
                        Triangle t = (Triangle) shape;
                        t.setX3(u.getX3());
                        t.setY3(u.getY3());
                    }

                    shapesInArea.add(shape);
                    repaint();
                    break;
                }
                case 'P': {
                    if (!Area.shapesInArea.isEmpty()) {
                        Area.shapesInArea.remove(u.getIndex());
                    }
                    repaint();
                    break;
                }
                case 'C': {
                    if (!Area.shapesInArea.isEmpty()) {
                        Area.shapesInArea.remove(u.getIndex());
                    }
                    repaint();
                    break;
                }
                case 'M': {
                      
                    Shape sMove = Area.shapesInArea.get(u.getIndex());
                    sMove.setX1(sMove.getX1() + (u.getX2() - u.getX1()));
                    sMove.setY1(sMove.getY1() + (u.getY2() - u.getY1()));
                    sMove.setX2(sMove.getX2() + (u.getX2() - u.getX1()));
                    sMove.setY2(sMove.getY2() + (u.getY2() - u.getY1()));

                    if (sMove instanceof Square || sMove instanceof Circle) {

                        sMove.setX2(Math.min(sMove.getX1(), sMove.getX2()) + u.getIncreaseSide() + (u.getX2() - u.getX1()));
                        sMove.setY2(Math.min(sMove.getY1(), sMove.getY2()) + u.getIncreaseSide() + (u.getY2() - u.getY1()));
                    } else if (sMove instanceof RightAngledTriangle) {
                        RightAngledTriangle tri = (RightAngledTriangle) sMove;
                        tri.setX3(tri.getX1());
                        tri.setY3(tri.getY2());

                    } else if (sMove instanceof Triangle) {
                        Triangle tri = (Triangle) sMove;
                        tri.setX3(tri.getX3() + (u.getX2() - u.getX1()));
                        tri.setY3(tri.getY3() + (u.getY2() - u.getY1()));
                    }

                    repaint();
                    break;
                }
                case 'Z': {
                   
                    Shape sMove = shapesInArea.get(u.getIndex());
                    if (sMove instanceof RightAngledTriangle) {
                        RightAngledTriangle rat = (RightAngledTriangle) sMove;
                        rat.setX2(sMove.getX2() + (u.getX2() - u.getX1()));
                        rat.setY2(sMove.getY2());
                        rat.setX1(sMove.getX1());
                        rat.setY1(sMove.getY1() + (u.getY2() - u.getY1()));
                    } else {
                        sMove.setX2(sMove.getX2() + (u.getX2() - u.getX1()));
                        sMove.setY2(sMove.getY2() + (u.getY2() - u.getY1()));
                        if (sMove instanceof Square || sMove instanceof Circle) {

                            sMove.setX2(Math.min(sMove.getX1(), sMove.getX2()) + u.getIncreaseSide() + (u.getX2() - u.getX1()));
                            sMove.setY2(Math.min(sMove.getY1(), sMove.getY2()) + u.getIncreaseSide() + (u.getY2() - u.getY1()));

                        } else if (sMove instanceof Triangle) {

                            Triangle tri = (Triangle) sMove;
                            tri.setX1(sMove.getX1() + (u.getX2() - u.getX1()));
                            tri.setY1(sMove.getY1() + (u.getY2() - u.getY1()));

                        }

                    }
                    repaint();
                    break;
                }
                case 'F': {
                    u.setClearedColor(Area.shapesInArea.get(u.getIndex()).getColor());

                    if (u.isIsFilled()) {
                        Area.shapesInArea.get(u.getIndex()).setColor(u.getColor());
                    } else {
                        Area.shapesInArea.get(u.getIndex()).setIsFilled(false);
                    }
                    repaint();
                    break;
                }

            }        // TODO add your handling code here:

        }
    }//GEN-LAST:event_undoButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        Area.shapesInArea.clear();
        repaint();

    }//GEN-LAST:event_clearButtonActionPerformed

    private void drawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawButtonActionPerformed
        // TODO add your handling code here:
        if (drawButton.isSelected()) {
            area1.action = 'P';
        }

    }//GEN-LAST:event_drawButtonActionPerformed

    private void jColorChooser1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jColorChooser1MouseClicked
        // TODO add your handling code here:
        area1.currentColor = jColorChooser1.getColor();
    }//GEN-LAST:event_jColorChooser1MouseClicked

    private void moveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveButtonActionPerformed
        // TODO add your handling code here:
        if (moveButton.isSelected()) {
            area1.action = 'M';
        }
    }//GEN-LAST:event_moveButtonActionPerformed

    private void resizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeButtonActionPerformed
        // TODO add your handling code here:
        if (resizeButton.isSelected()) {
            area1.action = 'Z';
        }
    }//GEN-LAST:event_resizeButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        // TODO add your handling code here:
        if (copyButton.isSelected()) {
            area1.action = 'C';
        }
    }//GEN-LAST:event_copyButtonActionPerformed

    private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoButtonActionPerformed
        // TODO add your handling code here:
        if (!Area.reDo.isEmpty()) {
            Undo u = Area.reDo.pop();
            switch (u.getActionUndo()) {
                
                case 'P': {
                    ShapeFactory sFactory = new ShapeFactory();
                    Shape shape = sFactory.createShape(u.getShape(), u.getColor(), u.isIsFilled(), u.getX1(), u.getX2(), u.getY1(), u.getY2());
                    if (shape instanceof RightAngledTriangle) {
                        RightAngledTriangle rt = (RightAngledTriangle) shape;
                        rt.setX3(u.getX3());
                        rt.setY3(u.getY3());
                    } else if (shape instanceof Triangle) {
                        Triangle t = (Triangle) shape;
                        t.setX3(u.getX3());
                        t.setY3(u.getY3());
                    }

                    shapesInArea.add(shape);
                    repaint();
                    break;
                }
                case 'D': {
                    if (!Area.shapesInArea.isEmpty()) {
                        int index = Area.shapesInArea.size() - 1;
                        Area.shapesInArea.remove(index);
                    }
                    repaint();
                    break;
                }
                case 'C': {
                     ShapeFactory sFactory = new ShapeFactory();
                    Shape shape = sFactory.createShape(u.getShape(), u.getColor(), u.isIsFilled(), u.getX1(), u.getX2(), u.getY1(), u.getY2());
                    if (shape instanceof RightAngledTriangle) {
                        RightAngledTriangle rt = (RightAngledTriangle) shape;
                        rt.setX3(u.getX3());
                        rt.setY3(u.getY3());
                    } else if (shape instanceof Triangle) {
                        Triangle t = (Triangle) shape;
                        t.setX3(u.getX3());
                        t.setY3(u.getY3());
                    }

                    shapesInArea.add(shape);
                    repaint();
                    break;
                
                }
                case 'M': {
                    int temp;
                    temp = u.getX1();
                    u.setX1(u.getX2());
                    u.setX2(temp);
                    temp = u.getY1();
                    u.setY1(u.getY2());
                    u.setY2(temp);
                    Shape sMove = Area.shapesInArea.get(u.getIndex());
                    sMove.setX1(sMove.getX1() + (u.getX2() - u.getX1()));
                    sMove.setY1(sMove.getY1() + (u.getY2() - u.getY1()));
                    sMove.setX2(sMove.getX2() + (u.getX2() - u.getX1()));
                    sMove.setY2(sMove.getY2() + (u.getY2() - u.getY1()));

                    if (sMove instanceof Square || sMove instanceof Circle) {

                        sMove.setX2(Math.min(sMove.getX1(), sMove.getX2()) + u.getIncreaseSide() + (u.getX2() - u.getX1()));
                        sMove.setY2(Math.min(sMove.getY1(), sMove.getY2()) + u.getIncreaseSide() + (u.getY2() - u.getY1()));
                    } else if (sMove instanceof RightAngledTriangle) {
                        RightAngledTriangle tri = (RightAngledTriangle) sMove;
                        tri.setX3(tri.getX1());
                        tri.setY3(tri.getY2());

                    } else if (sMove instanceof Triangle) {
                        Triangle tri = (Triangle) sMove;
                        tri.setX3(tri.getX3() + (u.getX2() - u.getX1()));
                        tri.setY3(tri.getY3() + (u.getY2() - u.getY1()));
                    }
                    repaint();
                    break;

                }
                case 'Z': {
                    int temp;
                    temp = u.getX1();
                    u.setX1(u.getX2());
                    u.setX2(temp);
                    temp = u.getY1();
                    u.setY1(u.getY2());
                    u.setY2(temp);
                    Shape sMove = shapesInArea.get(u.getIndex());
                    if (sMove instanceof RightAngledTriangle) {
                        RightAngledTriangle rat = (RightAngledTriangle) sMove;
                        rat.setX2(sMove.getX2() + (u.getX2() - u.getX1()));
                        rat.setY2(sMove.getY2());
                        rat.setX1(sMove.getX1());
                        rat.setY1(sMove.getY1() + (u.getY2() - u.getY1()));
                    } else {
                        sMove.setX2(sMove.getX2() + (u.getX2() - u.getX1()));
                        sMove.setY2(sMove.getY2() + (u.getY2() - u.getY1()));
                        if (sMove instanceof Square || sMove instanceof Circle) {

                            sMove.setX2(Math.min(sMove.getX1(), sMove.getX2()) + u.getIncreaseSide() + (u.getX2() - u.getX1()));
                            sMove.setY2(Math.min(sMove.getY1(), sMove.getY2()) + u.getIncreaseSide() + (u.getY2() - u.getY1()));

                        } else if (sMove instanceof Triangle) {

                            Triangle tri = (Triangle) sMove;
                            tri.setX1(sMove.getX1() + (u.getX2() - u.getX1()));
                            tri.setY1(sMove.getY1() + (u.getY2() - u.getY1()));

                        }

                    }
                    repaint();
                    break;
                }
                case 'F': {
                    if(!u.isIsFilled())
                        Area.shapesInArea.get(u.getIndex()).setIsFilled(true);
                    Area.shapesInArea.get(u.getIndex()).setColor(u.getClearedColor());

                    repaint();
                    break;
                }
            }
        }


    }//GEN-LAST:event_redoButtonActionPerformed

    private void repaintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repaintButtonActionPerformed
        // TODO add your handling code here:
        area1.action = 'F';
        area1.currentColor = jColorChooser1.getColor();
    }//GEN-LAST:event_repaintButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                PaintingSection ps = PaintingSection.getInstance();
                ps.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private DrawingArea.Area area1;
    private javax.swing.JButton circleButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JToggleButton copyButton;
    private javax.swing.JToggleButton deleteClickedButton;
    private javax.swing.JToggleButton drawButton;
    private javax.swing.JCheckBox filledOrNot;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton lineButton;
    private javax.swing.JToggleButton moveButton;
    private javax.swing.JButton ovalButton;
    private javax.swing.JButton rectangleButton;
    private javax.swing.JButton redoButton;
    private javax.swing.JButton repaintButton;
    private javax.swing.JToggleButton resizeButton;
    private javax.swing.JButton rightangledtriangle;
    private javax.swing.JButton squareButton;
    private javax.swing.JButton triangleButton;
    private javax.swing.JButton undoButton;
    // End of variables declaration//GEN-END:variables
}
